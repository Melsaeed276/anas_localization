// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by bin/generate_dictionary.dart

import 'package:localization/src/utils/plural_rules.dart';

class Dictionary {
  final String _locale;
/// New App Name
  final String appName;
/// OK
  final String ok;
/// Cancel
  final String cancel;
/// Close
  final String close;
/// Yes
  final String yes;
/// No
  final String no;
/// Save
  final String save;
/// Edit
  final String edit;
/// Delete
  final String delete;
/// Update
  final String update;
/// Create
  final String create;
/// Next
  final String next;
/// Previous
  final String previous;
/// Back
  final String back;
/// Continue
  final String continueText;
/// Confirm
  final String confirm;
/// Submit
  final String submit;
/// Retry
  final String retry;
/// Search
  final String search;
/// Clear
  final String clear;
/// Error
  final String error;
/// Success
  final String success;
/// Warning
  final String warning;
/// Info
  final String info;
/// Loading...
  final String loading;
/// Please wait...
  final String pleaseWait;
/// Network error. Please try again.
  final String networkError;
/// Something went wrong. Please try again.
  final String somethingWentWrong;
/// No data available.
  final String noData;
/// No results found.
  final String noResults;
/// This field is required.
  final String requiredField;
/// Please enter a valid email address.
  final String invalidEmail;
/// Password
  final String password;
/// Email
  final String email;
/// Username
  final String username;
/// Login
  final String login;
/// Logout
  final String logout;
/// Sign Up
  final String signup;
/// Forgot Password?
  final String forgotPassword;
/// Remember me
  final String rememberMe;
/// Profile
  final String profile;
/// Settings
  final String settings;
/// Home
  final String home;
/// Language
  final String language;
/// Change Language
  final String changeLanguage;
/// Select Language
  final String selectLanguage;
/// welcome
  final String welcome;
/// Good morning
  final String goodMorning;
/// Good evening
  final String goodEvening;
/// Good night
  final String goodNight;
/// Notification
  final String notification;
/// Notifications
  final String notifications;
/// View all
  final String viewAll;
/// Send
  final String send;
/// Resend
  final String resend;
/// Terms and Conditions
  final String termsAndConditions;
/// Privacy Policy
  final String privacyPolicy;
/// Accept
  final String accept;
/// Decline
  final String decline;
/// 
  final Map<String, String> _genderForms;
/// {count} days
  final Map<String, String> _dayForms;
/// Contact Support
  final String contactSupport;
/// {count} items
  final Map<String, String> _itemsCountForms;
/// Something went
  final String somethingWent;
/// Welcome, {name}!
  final String _welcomeUserTpl;
/// {name?} has {amount} {currency}
  final String _moneyArgsTpl;

  Dictionary({
    required String locale,
    required this.appName,
    required this.ok,
    required this.cancel,
    required this.close,
    required this.yes,
    required this.no,
    required this.save,
    required this.edit,
    required this.delete,
    required this.update,
    required this.create,
    required this.next,
    required this.previous,
    required this.back,
    required this.continueText,
    required this.confirm,
    required this.submit,
    required this.retry,
    required this.search,
    required this.clear,
    required this.error,
    required this.success,
    required this.warning,
    required this.info,
    required this.loading,
    required this.pleaseWait,
    required this.networkError,
    required this.somethingWentWrong,
    required this.noData,
    required this.noResults,
    required this.requiredField,
    required this.invalidEmail,
    required this.password,
    required this.email,
    required this.username,
    required this.login,
    required this.logout,
    required this.signup,
    required this.forgotPassword,
    required this.rememberMe,
    required this.profile,
    required this.settings,
    required this.home,
    required this.language,
    required this.changeLanguage,
    required this.selectLanguage,
    required this.welcome,
    required this.goodMorning,
    required this.goodEvening,
    required this.goodNight,
    required this.notification,
    required this.notifications,
    required this.viewAll,
    required this.send,
    required this.resend,
    required this.termsAndConditions,
    required this.privacyPolicy,
    required this.accept,
    required this.decline,
    required Map<String, String> genderForms,
    required Map<String, String> dayForms,
    required this.contactSupport,
    required Map<String, String> itemsCountForms,
    required this.somethingWent,
    required String welcomeUserTpl,
    required String moneyArgsTpl,
  }) : _locale = locale, _genderForms = genderForms, _dayForms = dayForms, _itemsCountForms = itemsCountForms, _welcomeUserTpl = welcomeUserTpl, _moneyArgsTpl = moneyArgsTpl;

/// male
  String gender({required String gender}) {
    final forms = _genderForms;
    final form = gender;
    var t = (forms[form] ?? forms['other'] ?? '');
    {
      final pos = <Object?>[];
      var i = 0;
      if (pos.isNotEmpty) { t = t.replaceAllMapped(RegExp(r'\{\}'), (m) => (i < pos.length ? (pos[i++]?.toString() ?? '') : '').toString()); }
    }
    return t.replaceAllMapped(RegExp(r'\{([a-zA-Z0-9_]+)\}'), (m) {
      switch (m.group(1)) {  default: return m.group(0)!; }
    });
  }

/// {count} days
  String day({required num count}) {
    final forms = _dayForms;
    final form = PluralRules.select(_locale, count);
    var t = (forms[form] ?? forms['other'] ?? '');
    {
      final pos = <Object?>[];
      var i = 0;
      if (pos.isNotEmpty) { t = t.replaceAllMapped(RegExp(r'\{\}'), (m) => (i < pos.length ? (pos[i++]?.toString() ?? '') : '').toString()); }
    }
    return t.replaceAllMapped(RegExp(r'\{([a-zA-Z0-9_]+)\}'), (m) {
      switch (m.group(1)) { case 'count': return count.toString(); default: return m.group(0)!; }
    });
  }

/// {count} items
  String itemsCount({required num count}) {
    final forms = _itemsCountForms;
    final form = PluralRules.select(_locale, count);
    var t = (forms[form] ?? forms['other'] ?? '');
    {
      final pos = <Object?>[];
      var i = 0;
      if (pos.isNotEmpty) { t = t.replaceAllMapped(RegExp(r'\{\}'), (m) => (i < pos.length ? (pos[i++]?.toString() ?? '') : '').toString()); }
    }
    return t.replaceAllMapped(RegExp(r'\{([a-zA-Z0-9_]+)\}'), (m) {
      switch (m.group(1)) { case 'count': return count.toString(); default: return m.group(0)!; }
    });
  }

/// Welcome, {name}!
  String welcomeUser({required Object name}) {
    final t = _welcomeUserTpl;
    return t.replaceAllMapped(RegExp(r'\{([a-zA-Z0-9_]+)\}'), (m) {
      switch (m.group(1)) { case 'name': return name.toString(); default: return m.group(0)!; }
    });
  }

/// {name?} has {amount} {currency}
  String moneyArgs({Object? name, required Object amount, required Object currency}) {
    final t = _moneyArgsTpl;
    return t.replaceAllMapped(RegExp(r'\{([a-zA-Z0-9_]+)\}'), (m) {
      switch (m.group(1)) { case 'name': return name?.toString() ?? ''; case 'amount': return amount.toString(); case 'currency': return currency.toString(); default: return m.group(0)!; }
    });
  }

  factory Dictionary.fromMap(Map<String, dynamic> map, {required String locale}) {
    return Dictionary(
      locale: locale,
      appName: (map['app_name'] as String?) ?? '',
      ok: (map['ok'] as String?) ?? '',
      cancel: (map['cancel'] as String?) ?? '',
      close: (map['close'] as String?) ?? '',
      yes: (map['yes'] as String?) ?? '',
      no: (map['no'] as String?) ?? '',
      save: (map['save'] as String?) ?? '',
      edit: (map['edit'] as String?) ?? '',
      delete: (map['delete'] as String?) ?? '',
      update: (map['update'] as String?) ?? '',
      create: (map['create'] as String?) ?? '',
      next: (map['next'] as String?) ?? '',
      previous: (map['previous'] as String?) ?? '',
      back: (map['back'] as String?) ?? '',
      continueText: (map['continue'] as String?) ?? '',
      confirm: (map['confirm'] as String?) ?? '',
      submit: (map['submit'] as String?) ?? '',
      retry: (map['retry'] as String?) ?? '',
      search: (map['search'] as String?) ?? '',
      clear: (map['clear'] as String?) ?? '',
      error: (map['error'] as String?) ?? '',
      success: (map['success'] as String?) ?? '',
      warning: (map['warning'] as String?) ?? '',
      info: (map['info'] as String?) ?? '',
      loading: (map['loading'] as String?) ?? '',
      pleaseWait: (map['please_wait'] as String?) ?? '',
      networkError: (map['network_error'] as String?) ?? '',
      somethingWentWrong: (map['something_went_wrong'] as String?) ?? '',
      noData: (map['no_data'] as String?) ?? '',
      noResults: (map['no_results'] as String?) ?? '',
      requiredField: (map['required_field'] as String?) ?? '',
      invalidEmail: (map['invalid_email'] as String?) ?? '',
      password: (map['password'] as String?) ?? '',
      email: (map['email'] as String?) ?? '',
      username: (map['username'] as String?) ?? '',
      login: (map['login'] as String?) ?? '',
      logout: (map['logout'] as String?) ?? '',
      signup: (map['signup'] as String?) ?? '',
      forgotPassword: (map['forgot_password'] as String?) ?? '',
      rememberMe: (map['remember_me'] as String?) ?? '',
      profile: (map['profile'] as String?) ?? '',
      settings: (map['settings'] as String?) ?? '',
      home: (map['home'] as String?) ?? '',
      language: (map['language'] as String?) ?? '',
      changeLanguage: (map['change_language'] as String?) ?? '',
      selectLanguage: (map['select_language'] as String?) ?? '',
      welcome: (map['welcome'] as String?) ?? '',
      goodMorning: (map['good_morning'] as String?) ?? '',
      goodEvening: (map['good_evening'] as String?) ?? '',
      goodNight: (map['good_night'] as String?) ?? '',
      notification: (map['notification'] as String?) ?? '',
      notifications: (map['notifications'] as String?) ?? '',
      viewAll: (map['view_all'] as String?) ?? '',
      send: (map['send'] as String?) ?? '',
      resend: (map['resend'] as String?) ?? '',
      termsAndConditions: (map['terms_and_conditions'] as String?) ?? '',
      privacyPolicy: (map['privacy_policy'] as String?) ?? '',
      accept: (map['accept'] as String?) ?? '',
      decline: (map['decline'] as String?) ?? '',
      genderForms: (() {
        final raw = map['gender'];
        if (raw is String) return <String, String>{'other': raw};
        if (raw is Map) return raw.map((k, v) => MapEntry(k.toString(), v.toString()));
        return const <String, String>{};
      })(),
      dayForms: (() {
        final raw = map['day'];
        if (raw is String) return <String, String>{'other': raw};
        if (raw is Map) return raw.map((k, v) => MapEntry(k.toString(), v.toString()));
        return const <String, String>{};
      })(),
      contactSupport: (map['contact_support'] as String?) ?? '',
      itemsCountForms: (() {
        final raw = map['items_count'];
        if (raw is String) return <String, String>{'other': raw};
        if (raw is Map) return raw.map((k, v) => MapEntry(k.toString(), v.toString()));
        return const <String, String>{};
      })(),
      somethingWent: (map['something_went'] as String?) ?? '',
      welcomeUserTpl: (map['welcome_user'] as String?) ?? '',
      moneyArgsTpl: (map['money_args'] as String?) ?? '',
    );
  }
}
